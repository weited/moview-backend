pipeline {
    agent any

    environment {
        IMAGE_NAME           = "moview-backend"
        registryName         = "moview-backend"
        registryCredential   = "ACR"
        dockerImage          = ""
        registryUrl          = "moview.azurecr.io"
        CLUSTER_NAME         = "moview_chuanhui_v3"
        SERVICE_NAME         = "svc-sonia-2410"
        TASK_DEFINITION_NAME = "moview_chuanhui"
    }

    stages {
        stage('Cleanup docker space') {
            steps {
                echo 'Cleaning docker space ...'
                sh 'docker system prune -f'
                sh 'chmod +x gradlew'
            }
        }

        stage('Build image') {
            steps {
                echo 'Building the docker image ... '
                sh 'docker build -t ${IMAGE_NAME}:latest .'
                sh 'docker build -t ${registryName} .'
            }
        }

        stage('Push image to ECR') {
            steps {
                echo 'Pushing image to ECR'
                withAWS(credentials: 'jenkins_aws', region: 'ap-southeast-2') {
                    sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/j7g5d1x6"
                    sh "docker tag ${IMAGE_NAME}:latest public.ecr.aws/j7g5d1x6/${IMAGE_NAME}:latest"
                    sh "docker push public.ecr.aws/j7g5d1x6/${IMAGE_NAME}:latest"
                    sh 'aws ecs update-service --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}" --task-definition "${TASK_DEFINITION_NAME}"'

                }
            }
        }

        stage('Upload image to ACR') {
            steps {
                echo 'Pushing image to ACR'
                sh "docker tag ${IMAGE_NAME}:latest ${registryName}" //tag ACR
                script {
                    dockerImage = docker.build registryName
                    docker.withRegistry( "http://${registryUrl}", registryCredential ) {
                    dockerImage.push()
                    }
                }
            }
        }
    }

    post {
		always {
			cleanWs(cleanWhenNotBuilt: true,
				deleteDirs: true,
				disableDeferredWipeout: true,
				notFailBuild: true,
				patterns: [[pattern: '.gitignore', type: 'INCLUDE'],
				[pattern: '.propsfile', type: 'EXCLUDE']]
			)}
		success {
			echo "WELL DONE!"
			bitbucketStatusNotify(buildState: 'SUCCESSFUL')
		}
		failure {
			echo "FAILED"
			bitbucketStatusNotify(buildState: 'FAILED')
		}
	}
}